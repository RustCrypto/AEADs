//! ChaCha20Poly1305 and XChaCha20Poly1305 tests

#![cfg(feature = "alloc")]

use chacha20poly1305::ChaCha20Poly1305;
use chacha20poly1305::XChaCha20Poly1305;

// Test vectors from Wycheproof
aead::new_test!(
    wycheproof_chacha20poly1305,
    "wycheproof_chacha20poly1305",
    ChaCha20Poly1305
);
aead::new_test!(
    wycheproof_xchacha20poly1305,
    "wycheproof_xchacha20poly1305",
    XChaCha20Poly1305
);

macro_rules! impl_tests {
    ($cipher:ty, $key:expr, $nonce:expr, $aad:expr, $plaintext:expr, $ciphertext:expr, $tag:expr) => {
        #[test]
        fn encrypt() {
            let key = GenericArray::from_slice($key);
            let nonce = GenericArray::from_slice($nonce);
            let payload = Payload {
                msg: $plaintext,
                aad: $aad,
            };

            let ciphertext = <$cipher>::new(key).encrypt(nonce, payload).unwrap();

            let tag_begins = ciphertext.len() - 16;
            assert_eq!($ciphertext, &ciphertext[..tag_begins]);
            assert_eq!($tag, &ciphertext[tag_begins..]);
        }

        #[test]
        fn decrypt() {
            let key = GenericArray::from_slice($key);
            let nonce = GenericArray::from_slice($nonce);

            let mut ciphertext = Vec::from($ciphertext);
            ciphertext.extend_from_slice($tag);
            let payload = Payload {
                msg: &ciphertext,
                aad: $aad,
            };

            let plaintext = <$cipher>::new(key).decrypt(nonce, payload).unwrap();

            assert_eq!($plaintext, plaintext.as_slice());
        }

        #[test]
        fn decrypt_modified() {
            let key = GenericArray::from_slice($key);
            let nonce = GenericArray::from_slice($nonce);

            let mut ciphertext = Vec::from($ciphertext);
            ciphertext.extend_from_slice($tag);

            // Tweak the first byte
            ciphertext[0] ^= 0xaa;

            let payload = Payload {
                msg: &ciphertext,
                aad: $aad,
            };

            let cipher = <$cipher>::new(key);
            assert!(cipher.decrypt(nonce, payload).is_err());
        }
    };
}

//
// Test vectors common to RFC 8439 and `draft-arciszewski-xchacha`
//

const KEY: &[u8; 32] = &[
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
];

const AAD: &[u8; 12] = &[
    0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
];

const PLAINTEXT: &[u8] = b"Ladies and Gentlemen of the class of '99: \
    If I could offer you only one tip for the future, sunscreen would be it.";

/// ChaCha20Poly1305 test vectors.
///
/// From RFC 8439 Section 2.8.2:
/// <https://tools.ietf.org/html/rfc8439#section-2.8.2>
mod chacha20 {
    use super::{AAD, KEY, PLAINTEXT};
    use chacha20poly1305::aead::generic_array::GenericArray;
    use chacha20poly1305::aead::{Aead, KeyInit, Payload};
    use chacha20poly1305::ChaCha20Poly1305;

    const NONCE: &[u8; 12] = &[
        0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    ];

    const CIPHERTEXT: &[u8] = &[
        0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e,
        0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee,
        0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda,
        0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6,
        0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae,
        0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85,
        0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5,
        0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16,
    ];

    const TAG: &[u8] = &[
        0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06,
        0x91,
    ];

    impl_tests!(
        ChaCha20Poly1305,
        KEY,
        NONCE,
        AAD,
        PLAINTEXT,
        CIPHERTEXT,
        TAG
    );

    #[test]
    fn clone_impl() {
        let _ = ChaCha20Poly1305::new(GenericArray::from_slice(KEY)).clone();
    }
}

/// XChaCha20Poly1305 test vectors.
///
/// From <https://tools.ietf.org/html/draft-arciszewski-xchacha-03#appendix-A.1>
mod xchacha20 {
    use super::{AAD, KEY, PLAINTEXT};
    use chacha20poly1305::aead::generic_array::GenericArray;
    use chacha20poly1305::aead::{Aead, KeyInit, Payload};
    use chacha20poly1305::XChaCha20Poly1305;

    const NONCE: &[u8; 24] = &[
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,
        0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    ];

    const CIPHERTEXT: &[u8] = &[
        0xbd, 0x6d, 0x17, 0x9d, 0x3e, 0x83, 0xd4, 0x3b, 0x95, 0x76, 0x57, 0x94, 0x93, 0xc0, 0xe9,
        0x39, 0x57, 0x2a, 0x17, 0x00, 0x25, 0x2b, 0xfa, 0xcc, 0xbe, 0xd2, 0x90, 0x2c, 0x21, 0x39,
        0x6c, 0xbb, 0x73, 0x1c, 0x7f, 0x1b, 0x0b, 0x4a, 0xa6, 0x44, 0x0b, 0xf3, 0xa8, 0x2f, 0x4e,
        0xda, 0x7e, 0x39, 0xae, 0x64, 0xc6, 0x70, 0x8c, 0x54, 0xc2, 0x16, 0xcb, 0x96, 0xb7, 0x2e,
        0x12, 0x13, 0xb4, 0x52, 0x2f, 0x8c, 0x9b, 0xa4, 0x0d, 0xb5, 0xd9, 0x45, 0xb1, 0x1b, 0x69,
        0xb9, 0x82, 0xc1, 0xbb, 0x9e, 0x3f, 0x3f, 0xac, 0x2b, 0xc3, 0x69, 0x48, 0x8f, 0x76, 0xb2,
        0x38, 0x35, 0x65, 0xd3, 0xff, 0xf9, 0x21, 0xf9, 0x66, 0x4c, 0x97, 0x63, 0x7d, 0xa9, 0x76,
        0x88, 0x12, 0xf6, 0x15, 0xc6, 0x8b, 0x13, 0xb5, 0x2e,
    ];

    const TAG: &[u8] = &[
        0xc0, 0x87, 0x59, 0x24, 0xc1, 0xc7, 0x98, 0x79, 0x47, 0xde, 0xaf, 0xd8, 0x78, 0x0a, 0xcf,
        0x49,
    ];

    impl_tests!(
        XChaCha20Poly1305,
        KEY,
        NONCE,
        AAD,
        PLAINTEXT,
        CIPHERTEXT,
        TAG
    );
}

/// ChaCha20Poly1305 test vector that is longer than the largest SIMD fast path.
mod chacha20_long {
    use super::{AAD, KEY};
    use chacha20poly1305::aead::generic_array::GenericArray;
    use chacha20poly1305::aead::{Aead, KeyInit, Payload};
    use chacha20poly1305::ChaCha20Poly1305;

    const NONCE: &[u8; 12] = &[
        0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    ];

    const PLAINTEXT: &[u8] = &[0u8; 384];

    const CIPHERTEXT: &[u8] = &[
        0x9f, 0x7b, 0xe9, 0x5d, 0x01, 0xfd, 0x40, 0xba, 0x15, 0xe2, 0x8f, 0xfb, 0x36, 0x81, 0x0a,
        0xae, 0xc1, 0xc0, 0x88, 0x3f, 0x09, 0x01, 0x6e, 0xde, 0xdd, 0x8a, 0xd0, 0x87, 0x55, 0x82,
        0x03, 0xa5, 0x4e, 0x9e, 0xcb, 0x38, 0xac, 0x8e, 0x5e, 0x2b, 0xb8, 0xda, 0xb2, 0x0f, 0xfa,
        0xdb, 0x52, 0xe8, 0x75, 0x04, 0xb2, 0x6e, 0xbe, 0x69, 0x6d, 0x4f, 0x60, 0xa4, 0x85, 0xcf,
        0x11, 0xb8, 0x1b, 0x59, 0xfc, 0xb1, 0xc4, 0x5f, 0x42, 0x19, 0xee, 0xac, 0xec, 0x6a, 0xde,
        0xc3, 0x4e, 0x66, 0x69, 0x78, 0x8e, 0xdb, 0x41, 0xc4, 0x9c, 0xa3, 0x01, 0xe1, 0x27, 0xe0,
        0xac, 0xab, 0x3b, 0x44, 0xb9, 0xcf, 0x5c, 0x86, 0xbb, 0x95, 0xe0, 0x6b, 0x0d, 0xf2, 0x90,
        0x1a, 0xb6, 0x45, 0xe4, 0xab, 0xe6, 0x22, 0x15, 0x38, 0x0c, 0x03, 0xce, 0x35, 0x6c, 0xd7,
        0xa6, 0x76, 0x63, 0xfb, 0xdd, 0xef, 0xff, 0x64, 0x75, 0xf4, 0x7f, 0x56, 0x79, 0x9e, 0xcd,
        0xc3, 0x5f, 0x6c, 0x26, 0x5f, 0x51, 0x43, 0x70, 0x23, 0xc0, 0x89, 0x14, 0x46, 0x1b, 0xd8,
        0xe0, 0x5a, 0xf5, 0x17, 0xd5, 0xae, 0x39, 0xa6, 0xfa, 0xb4, 0x87, 0x4d, 0x72, 0xf0, 0xd9,
        0xba, 0x39, 0xcb, 0x7f, 0x58, 0x64, 0xfb, 0xfb, 0xdb, 0x79, 0x78, 0x56, 0xa1, 0x5e, 0x1b,
        0x3d, 0x13, 0xc9, 0x0a, 0x6a, 0xaa, 0x66, 0x83, 0xd7, 0x09, 0x86, 0xb6, 0x83, 0x72, 0xca,
        0x13, 0xf9, 0x13, 0x22, 0x6c, 0x8e, 0x97, 0x3b, 0x63, 0xd8, 0x44, 0x96, 0x13, 0x85, 0x11,
        0xba, 0x58, 0xab, 0x9e, 0xd3, 0x43, 0xff, 0xf8, 0xf0, 0xd6, 0xb0, 0x54, 0xe2, 0x12, 0x14,
        0x3e, 0x18, 0x4f, 0x06, 0xdd, 0x75, 0xf3, 0x2b, 0xbf, 0x42, 0x56, 0xe6, 0x00, 0xf9, 0x5a,
        0x1e, 0x08, 0x5c, 0x06, 0x6a, 0xda, 0x25, 0xe8, 0x49, 0x9b, 0xf4, 0x00, 0x59, 0x43, 0xc7,
        0x68, 0xe1, 0xae, 0x5d, 0x33, 0x63, 0x2f, 0x95, 0x85, 0x43, 0x69, 0xc8, 0x64, 0x02, 0xdc,
        0x2b, 0x9a, 0xb9, 0xb6, 0xd3, 0x00, 0x03, 0x99, 0xdb, 0xe7, 0x93, 0x5d, 0xe7, 0xac, 0xb3,
        0xfa, 0x3f, 0x15, 0x30, 0x68, 0x25, 0x0e, 0xac, 0x15, 0x22, 0xff, 0xb0, 0x54, 0x76, 0x02,
        0x51, 0x68, 0xd7, 0xa3, 0x9e, 0x06, 0x85, 0xde, 0x18, 0x3f, 0xda, 0x26, 0x85, 0xdd, 0x11,
        0x67, 0x77, 0x2e, 0x3c, 0xf0, 0xc6, 0x08, 0x2c, 0x96, 0x38, 0x81, 0x1d, 0x6f, 0xa3, 0xd5,
        0x90, 0x1c, 0x2c, 0x44, 0x68, 0x92, 0x67, 0xc1, 0x81, 0xec, 0x5c, 0x38, 0x9c, 0x6f, 0x74,
        0xa7, 0x44, 0x2b, 0xcf, 0x9f, 0x7e, 0x2a, 0x2c, 0x01, 0xeb, 0xb8, 0xd4, 0x53, 0x9c, 0xb7,
        0x2f, 0x0f, 0x52, 0xc6, 0x27, 0x59, 0x1a, 0xe2, 0xd2, 0xa7, 0x74, 0xd3, 0xbc, 0xe0, 0x43,
        0x98, 0x53, 0x05, 0x0e, 0x5a, 0x1b, 0x0a, 0x3c, 0xba,
    ];

    const TAG: &[u8] = &[
        0x3c, 0xd2, 0xe8, 0x2a, 0x32, 0x4a, 0x94, 0x3a, 0xf1, 0x93, 0x17, 0xfd, 0x94, 0xaa, 0x47,
        0xb8,
    ];

    impl_tests!(
        ChaCha20Poly1305,
        KEY,
        NONCE,
        AAD,
        PLAINTEXT,
        CIPHERTEXT,
        TAG
    );
}
