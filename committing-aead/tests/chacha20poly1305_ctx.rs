#[macro_use]
mod helpers;

use self::helpers::TestVector;

use aead::{Aead, AeadCore, KeyInit, Payload};
use chacha20poly1305::ChaCha20Poly1305;
use committing_aead::CtxAead;
use generic_array::{typenum::Unsigned, GenericArray};
use hex_literal::hex;
use sha2::Sha256;

const KEY: &[u8; 32] = &[
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
];

const AAD: &[u8; 12] = &[
    0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
];

const PLAINTEXT: &[u8] = b"Ladies and Gentlemen of the class of '99: \
    If I could offer you only one tip for the future, sunscreen would be it.";

/// Copied non-Wycheproof ChaCha20Poly1305 test vector and updated the tags
const CTX_TEST_VECTORS: &[TestVector] = &[TestVector {
    key: KEY,
    nonce: &[
        0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    ],
    plaintext: PLAINTEXT,
    aad: AAD,
    ciphertext: &[
        0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e,
        0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee,
        0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa, 0xfb, 0x69, 0xda,
        0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29, 0x05, 0xd6, 0xa5, 0xb6,
        0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c, 0x98, 0x03, 0xae,
        0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85,
        0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5,
        0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b, 0x61, 0x16,
    ],
    tag: &hex!("1c294d148a70af27feddc787f08f28466c5f744f813673f749fc7963d5714da4"),
}];

#[test]
fn ctx_encryptonly() {
    for vector in CTX_TEST_VECTORS {
        let key = GenericArray::from_slice(vector.key);
        let nonce = GenericArray::from_slice(vector.nonce);
        let payload = Payload {
            msg: vector.plaintext,
            aad: vector.aad,
        };

        let cipher = CtxAead::<ChaCha20Poly1305, Sha256>::new(key);
        let ciphertext = cipher.encrypt(nonce, payload).unwrap();
        let (ct, tag) = ciphertext.split_at(
            ciphertext.len() - <CtxAead<ChaCha20Poly1305, Sha256> as AeadCore>::TagSize::to_usize(),
        );
        assert_eq!(vector.ciphertext, ct, "ctxt mismatch");
        assert_eq!(vector.tag, tag, "tag mismatch");
    }
}
