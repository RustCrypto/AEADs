[package]
name = "eax"
version = "0.5.0"
description = """
Pure Rust implementation of the EAX
Authenticated Encryption with Associated Data (AEAD) Cipher
with optional architecture-specific hardware acceleration

This scheme is only based on a block cipher. It uses counter mode (CTR) for
encryption and CBC mode for generating a OMAC/CMAC/CBCMAC (all names for the same thing).
"""
authors = ["RustCrypto Developers"]
edition = "2024"
license = "Apache-2.0 OR MIT"
readme = "README.md"
documentation = "https://docs.rs/eax"
repository = "https://github.com/RustCrypto/AEADs"
keywords = ["aead", "aes", "encryption"]
categories = ["cryptography", "no-std"]
rust-version = "1.85"

[dependencies]
aead = { version = "0.6.0-rc.1", default-features = false }
cipher = "0.5.0-rc.0"
cmac = "0.8.0-rc.0"
ctr = "0.10.0-rc.0"
subtle = { version = "2", default-features = false }

[dev-dependencies]
aead = { version = "0.6.0-rc.1", features = ["dev"], default-features = false }
aes = "0.9.0-rc.0"

[features]
default = ["alloc", "os_rng"]
alloc = ["aead/alloc"]
arrayvec = ["aead/arrayvec"]
bytes = ["aead/bytes"]
os_rng = ["aead/os_rng", "rand_core"]
heapless = ["aead/heapless"]
rand_core = ["aead/rand_core"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
