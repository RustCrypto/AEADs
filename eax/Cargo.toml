[package]
name = "eax"
version = "0.5.0-pre.1"
description = """
Pure Rust implementation of the EAX
Authenticated Encryption with Associated Data (AEAD) Cipher
with optional architecture-specific hardware acceleration

This scheme is only based on a block cipher. It uses counter mode (CTR) for
encryption and CBC mode for generating a OMAC/CMAC/CBCMAC (all names for the same thing).
"""
authors = ["RustCrypto Developers"]
edition = "2021"
license = "Apache-2.0 OR MIT"
readme = "README.md"
documentation = "https://docs.rs/eax"
repository = "https://github.com/RustCrypto/AEADs"
keywords = ["aead", "aes", "encryption"]
categories = ["cryptography", "no-std"]
rust-version = "1.56"

[dependencies]
aead = { version = "=0.5.0-pre.2", default-features = false }
cipher = "0.3"
cmac = "0.6"
ctr = "0.8"
subtle = { version = "2", default-features = false }

[dev-dependencies]
aead = { version = "=0.5.0-pre.2", features = ["dev"], default-features = false }
aes = "0.7"

[features]
default = ["alloc"]
std = ["aead/std", "alloc"]
alloc = ["aead/alloc"]
getrandom  = ["aead/getrandom"]
heapless = ["aead/heapless"]
stream = ["aead/stream"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
